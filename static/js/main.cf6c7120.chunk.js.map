{"version":3,"sources":["components/FortuneCookie.js","components/NavComponent.js","components/FooterComponent.js","Pages/Homepage.js","App.js","serviceWorker.js","index.js"],"names":["FortuneCookie","props","ButtonClick","setState","randoNum","Math","round","random","FortuneList","length","message","state","Fragment","Jumbotron","bsPrefix","Container","className","this","Button","variant","onClick","Component","NavComponent","Navbar","collapseOnSelect","expand","bg","sticky","Brand","href","Toggle","aria-controls","Collapse","id","Nav","Link","FooterComponent","Row","Col","sm","Homepage","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"uVAwCeA,G,kBAlCX,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KAOVC,YAAc,WACV,EAAKC,UAAS,WACV,IAAIC,EAAWC,KAAKC,MAAMD,KAAKE,SAASC,IAAYC,QACpD,MAAO,CAACC,QAASF,IAAYJ,QARjC,EAAKO,MAAQ,CACTD,QAAS,uCAJE,E,sEAiBf,OACI,kBAAC,IAAME,SAAP,KACI,kBAACC,EAAA,EAAD,CAAWC,SAAS,oBAChB,kBAACC,EAAA,EAAD,CAAWD,SAAS,4BAChB,gCAAQ,wBAAIE,UAAU,aAAaC,KAAKN,MAAMD,SAC9C,6BACA,kBAACQ,EAAA,EAAD,CAAQC,QAAQ,OAAOC,QAASH,KAAKf,aAArC,2C,GAxBImB,c,gBCsBbC,E,iLApBP,OACA,kBAAC,IAAMV,SAAP,KACQ,kBAACW,EAAA,EAAD,CAAQC,kBAAgB,EAACC,OAAO,KAAKC,GAAG,OAAOP,QAAQ,OAAOQ,OAAO,OACjE,kBAACJ,EAAA,EAAOK,MAAR,CAAcC,KAAK,SAAnB,0BACI,kBAACN,EAAA,EAAOO,OAAR,CAAeC,gBAAc,0BAC7B,kBAACR,EAAA,EAAOS,SAAR,CAAiBC,GAAG,wBAAwBjB,UAAU,uBAClD,kBAACkB,EAAA,EAAD,KACI,kBAACA,EAAA,EAAIC,KAAL,CAAUN,KAAK,MAAf,QACA,kBAACK,EAAA,EAAIC,KAAL,CAAUN,KAAK,MAAf,SACA,kBAACK,EAAA,EAAIC,KAAL,CAAUN,KAAK,MAAf,UACA,kBAACK,EAAA,EAAIC,KAAL,CAAUN,KAAK,MAAf,UACA,kBAACK,EAAA,EAAIC,KAAL,CAAUN,KAAK,MAAf,mB,GAfLR,a,gBCkCZe,MAjCf,WACI,OACI,kBAAC,IAAMxB,SAAP,KACI,kBAACG,EAAA,EAAD,CAAWD,SAAS,oBAChB,kBAACuB,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAKC,IAAE,EAACvB,UAAU,OACd,8CACA,2MAIJ,kBAACsB,EAAA,EAAD,CAAKC,IAAE,EAACvB,UAAU,OAClB,8CACI,2MAGJ,kBAACsB,EAAA,EAAD,CAAKC,IAAE,EAACvB,UAAU,OAClB,8CACI,4MAIR,kBAACqB,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAKL,GAAG,mBACJ,2DCbTO,MAVf,WACI,OACI,kBAAC,IAAM5B,SAAP,KACI,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCMG6B,G,6LANX,OACE,kBAAC,EAAD,U,GAHYpB,cCIEqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMhD,c","file":"static/js/main.cf6c7120.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport FortuneList from 'fortune-cookie';\r\nimport {Button, Jumbotron, Container} from 'react-bootstrap';\r\nimport '../custom.css'\r\n\r\nclass FortuneCookie extends Component{\r\n    constructor(props) {\r\n        super(props)\r\n    \r\n        this.state = {\r\n            message: 'Here you will receive your fortune!'\r\n        }\r\n    }\r\n\r\n    ButtonClick = () => {\r\n        this.setState(() => {\r\n            let randoNum = Math.round(Math.random()*FortuneList.length);\r\n            return({message: FortuneList[randoNum]});\r\n        })\r\n    }\r\n    \r\n\r\n    render(){\r\n        return(\r\n            <React.Fragment>\r\n                <Jumbotron bsPrefix=\"custom-jumbotron\">\r\n                    <Container bsPrefix=\"custom-fortune-container\">\r\n                        <center><h1 className=\"custom-h1\">{this.state.message}</h1>\r\n                        <br/>\r\n                        <Button variant=\"dark\" onClick={this.ButtonClick}>Click to receive a new fortune!</Button>\r\n                        </center>\r\n                    </Container>\r\n                </Jumbotron>\r\n             \r\n            </React.Fragment>\r\n        );\r\n    }    \r\n}\r\n\r\n\r\nexport default FortuneCookie","import React, { Component } from 'react'\r\nimport {Nav, Navbar} from 'react-bootstrap'\r\n\r\nclass NavComponent extends Component {\r\n\r\n\r\n    render() {\r\n        return (\r\n        <React.Fragment>\r\n                <Navbar collapseOnSelect expand=\"md\" bg=\"dark\" variant=\"dark\" sticky=\"top\">\r\n                    <Navbar.Brand href=\"#home\">Fortune Cookie Project</Navbar.Brand>\r\n                        <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n                        <Navbar.Collapse id=\"responsive-navbar-nav\" className=\"justify-content-end\">\r\n                            <Nav>\r\n                                <Nav.Link href=\"#1\">Home</Nav.Link>\r\n                                <Nav.Link href=\"#2\">About</Nav.Link>\r\n                                <Nav.Link href=\"#3\">Videos</Nav.Link>\r\n                                <Nav.Link href=\"#4\">Photos</Nav.Link>\r\n                                <Nav.Link href=\"#5\">Contact</Nav.Link>\r\n                            </Nav>\r\n                        </Navbar.Collapse>\r\n                </Navbar>\r\n        </React.Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default NavComponent\r\n","import React from 'react';\r\nimport {Row, Col, Container} from 'react-bootstrap';\r\nimport \"../custom.css\"\r\n\r\nfunction FooterComponent() {\r\n    return (\r\n        <React.Fragment>\r\n            <Container bsPrefix=\"custom-container\">\r\n                <Row>\r\n                    <Col sm className=\"p-5\">\r\n                        <h4>Footer Content</h4>\r\n                        <p>Lorem ipsum dolor sit amet, ius id probo legimus. \r\n                        Facer reprimique id sea. Ad laoreet antiopam laboramus vis, munere iuvaret copiosae quo id. Sed solet postea appareat in.</p>\r\n\r\n                    </Col>\r\n                    <Col sm className=\"p-5\">\r\n                    <h4>Footer Content</h4>\r\n                        <p>Lorem ipsum dolor sit amet, ius id probo legimus. \r\n                        Facer reprimique id sea. Ad laoreet antiopam laboramus vis, munere iuvaret copiosae quo id. Sed solet postea appareat in.</p>\r\n                    </Col>\r\n                    <Col sm className=\"p-5\">\r\n                    <h4>Footer Content</h4>\r\n                        <p>Lorem ipsum dolor sit amet, ius id probo legimus. \r\n                        Facer reprimique id sea. Ad laoreet antiopam laboramus vis, munere iuvaret copiosae quo id. Sed solet postea appareat in.</p>\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col id=\"content-creator\">\r\n                        <h7>Made by Carlos Santana</h7>\r\n                    </Col>\r\n                </Row>\r\n\r\n            </Container>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default FooterComponent\r\n","import React from 'react';\r\nimport FortuneCookie from '../components/FortuneCookie';\r\nimport NavComponent from '../components/NavComponent';\r\nimport FooterComponent from '../components/FooterComponent';\r\n\r\nfunction Homepage() {\r\n    return (\r\n        <React.Fragment>\r\n            <NavComponent /> \r\n            <FortuneCookie />\r\n            <FooterComponent />\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default Homepage\r\n\r\n","import React, {Component} from 'react';\r\nimport Homepage from './Pages/Homepage'\r\nimport './App.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\n\r\n\r\n\r\n\r\nclass App extends Component  {\r\n  render(){\r\n    return (\r\n      <Homepage />\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}